@inherits WeekCalendarBase

<div class="calendar">
    <div class="calendar__header">
        <div class="calendar__time-scale">
            @*Place holder to align scale*@
        </div>
        @foreach(var date in ViewingDates)
        {
            <div class="calendar__header-label">
                <span class="is-hidden-mobile">@Enum.GetName(typeof(DayOfWeek), date.DayOfWeek)</span>
                <span class="is-hidden-tablet">@(Enum.GetName(typeof(DayOfWeek), date.DayOfWeek).First())</span>
                <div class="calendar__header-number">@date.Day</div>
            </div>
        }
    </div>
    <div class="calendar__content">
        @* Display hours *@
        <div class="calendar__time-scale">
            @for (var hour = 0; hour <= 23; hour++)
            {
                <div class="calendar__interval calendar__interval--time-scale" id="interval-@hour">
                    @DateTimeHelper.GetHoursAs12HourTime(new DateTime(2020, 1, 1, hour, 0, 0))
                </div>
            }
        </div>
        @for (var day = 0; day < 7; day++)
        {
            <div class="calendar__column">
                @for (var hour = 0; hour < 23; hour++)
                {
                    <div class="calendar__interval" @onclick="@(() => ShowModal(new PlannerItemDTO()))">
                        @if (Items != null)
                        {
                            @foreach (var item in PlannerItemService.FilterForInterval(Items, hour, (DayOfWeek)day))
                            {
                                <PlannerEvent ClickCallback="@(()=> ShowModal(item))" Colour="@(GetCategoryColour(item))" Item="item"></PlannerEvent>
                            }
                        }
                        <CalendarNowMarker ForDate="@GetDateForHourInterval(day, hour)"></CalendarNowMarker>
                    </div>
                }
            </div>
        }

    </div>
</div>