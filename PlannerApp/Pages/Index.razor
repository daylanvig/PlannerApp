@page "/"
@inject HttpClient Http

<h1 class="title">@Title</h1>

<section class="section">
    <div class="container">
        <EditForm Model="@NewItem" OnValidSubmit="@SaveItem">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <Field>
                <ControlContent>
                    <TextInput class="is-medium" @bind-Value="NewItem.Description" placeholder="What do you have to do?*"></TextInput>
                    <ValidationMessage For="@(() => NewItem.Description)"></ValidationMessage>
                </ControlContent>
            </Field>
            <Field>
                <ControlContent>
                    <DateInput class="is-medium" @bind-Value="NewItem.PlannedActionDate" placeholder="When do you want to do it?*"></DateInput>
                    <ValidationMessage For="@(() => NewItem.PlannedActionDate)"></ValidationMessage>
                </ControlContent>
            </Field>
            <Field>
                <ControlContent>
                    <Button Label="Save" CssClasses="is-success is-pulled-right" id="saveNewItemBtn"></Button>
                </ControlContent>
            </Field>
        </EditForm>
    </div>
</section>
<section class="section" id="plannerItems">
    <div class="container has-text-centered">
        @if (plannerItems == null)
        {
            <span>Loading Your Planner....</span>
        }
        else if (plannerItems.Count == 0)
        {
            <span>You don't have anything planned. Add something above!</span>
        }
        else
        {
            <ul>
                @foreach (var item in plannerItems.OrderBy(p => p.PlannedActionDate))
                {
                    <li id="item-@(item.ID)">
                        <span>@item.Description</span>
                        <span>@(item.PlannedActionDate.Value.ToString("MMMM d, yyyy"))</span>
                    </li>
                }
            </ul>
        }
    </div>
</section>
@code {
    public string Title = "Your Planner";
    public PlannerItemDTO NewItem { get; set; } = new PlannerItemDTO();

    private List<PlannerItemDTO> plannerItems;

    protected override async Task OnInitializedAsync()
    {
        plannerItems = await Http.GetJsonAsync<List<PlannerItemDTO>>("/api/PlannerItems");
    }

    private async Task SaveItem()
    {
        PlannerItemDTO createdItem;
        try
        {
            createdItem = await Http.PostJsonAsync<PlannerItemDTO>("/api/PlannerItems", NewItem);
        }
        catch
        {
            // todo -> error message/handling
            createdItem = null;
        }
        plannerItems.Add(createdItem);
        NewItem = new PlannerItemDTO();
    }
} 