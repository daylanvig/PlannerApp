@page "/Day"
@inherits DayPlannerBase

<section class="section is-flex">
    <menu type="toolbar" class="menu menu--side-menu">
        <menuitem>
            <label class="menu-label">
                Actions
            </label>
        </menuitem>
        <menuitem class="menu-list">
            <a @onclick="BeginAddingItem">Add Item</a>
        </menuitem>
        <menuitem class="menu-list">
            <input type="date" class="input" value="@(DateTimeHelper.FormatDateInput(ViewingDate))" @onchange="ChangeViewingDate" />
        </menuitem>
    </menu>
    <main class="day-planner">
        <h1 class="day-planner__title is-size-3-desktop is-size-4-touch">
            Your Schedule For @DateTimeHelper.FormatFullDate(ViewingDate)
        </h1>
        @if (Items == null)
        {
            <LoadingIcon></LoadingIcon>
        }
        else
        {
            @for (var hour = 4; hour <= 20; hour++)
            {
                <div class="day-planner__interval">
                    <div class="day-planner__time-display">@DateTimeHelper.FormatTime(new DateTime(2020, 1, 1, hour, 0, 0))</div>
                    <div class="day-planner__entries">
                        @foreach ( var itemInInterval in PlannerItemService.FilterForInterval(Items, hour))
                        {
                            <PlannerEvent Item="itemInInterval" ClickCallback="() => ShowModal(itemInInterval)"></PlannerEvent>
                        }
                    </div>
                </div>
            }
        }
    </main>
</section>
@if (ModalFormItem != null)
{
    <Modal @ref="ModalRef" Class="is-fixed">
        <ModalBackdrop />
        <ModalContent Class="box" Dialog="false">
            <CloseButton Class="is-pulled-right" Clicked="HideModal"></CloseButton>
            <ModalBody>
                <PlannerItemForm Item="ModalFormItem" OnValidCallback="SavePlannerItem">
                </PlannerItemForm>
            </ModalBody>
        </ModalContent>
    </Modal>
}